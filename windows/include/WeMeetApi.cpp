// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "WeMeetApi.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon {

// DartInitParams

const std::string& DartInitParams::sdk_id() const { return sdk_id_; }
void DartInitParams::set_sdk_id(std::string_view value_arg) { sdk_id_ = value_arg; }

const std::string& DartInitParams::sdk_token() const { return sdk_token_; }
void DartInitParams::set_sdk_token(std::string_view value_arg) { sdk_token_ = value_arg; }

const std::string& DartInitParams::app_name() const { return app_name_; }
void DartInitParams::set_app_name(std::string_view value_arg) { app_name_ = value_arg; }

const std::string& DartInitParams::server_address() const { return server_address_; }
void DartInitParams::set_server_address(std::string_view value_arg) { server_address_ = value_arg; }

const std::string& DartInitParams::server_domain() const { return server_domain_; }
void DartInitParams::set_server_domain(std::string_view value_arg) { server_domain_ = value_arg; }

const std::string& DartInitParams::env_name() const { return env_name_; }
void DartInitParams::set_env_name(std::string_view value_arg) { env_name_ = value_arg; }

const std::string& DartInitParams::env_id() const { return env_id_; }
void DartInitParams::set_env_id(std::string_view value_arg) { env_id_ = value_arg; }

const std::string& DartInitParams::env_domain() const { return env_domain_; }
void DartInitParams::set_env_domain(std::string_view value_arg) { env_domain_ = value_arg; }

bool DartInitParams::env_debug_mode() const { return env_debug_mode_; }
void DartInitParams::set_env_debug_mode(bool value_arg) { env_debug_mode_ = value_arg; }

const std::string& DartInitParams::prefer_language() const { return prefer_language_; }
void DartInitParams::set_prefer_language(std::string_view value_arg) { prefer_language_ = value_arg; }

flutter::EncodableMap DartInitParams::ToEncodableMap() const {
return flutter::EncodableMap{
    {flutter::EncodableValue("sdkId"), flutter::EncodableValue(sdk_id_)},
    {flutter::EncodableValue("sdkToken"), flutter::EncodableValue(sdk_token_)},
    {flutter::EncodableValue("appName"), flutter::EncodableValue(app_name_)},
    {flutter::EncodableValue("serverAddress"), flutter::EncodableValue(server_address_)},
    {flutter::EncodableValue("serverDomain"), flutter::EncodableValue(server_domain_)},
    {flutter::EncodableValue("envName"), flutter::EncodableValue(env_name_)},
    {flutter::EncodableValue("envId"), flutter::EncodableValue(env_id_)},
    {flutter::EncodableValue("envDomain"), flutter::EncodableValue(env_domain_)},
    {flutter::EncodableValue("envDebugMode"), flutter::EncodableValue(env_debug_mode_)},
    {flutter::EncodableValue("preferLanguage"), flutter::EncodableValue(prefer_language_)},
  };
}

DartInitParams::DartInitParams() {}

DartInitParams::DartInitParams(flutter::EncodableMap map) {
  auto& encodable_sdk_id = map.at(flutter::EncodableValue("sdkId"));
  if (const std::string* pointer_sdk_id = std::get_if<std::string>(&encodable_sdk_id)) {
    sdk_id_ = *pointer_sdk_id;
  }
  auto& encodable_sdk_token = map.at(flutter::EncodableValue("sdkToken"));
  if (const std::string* pointer_sdk_token = std::get_if<std::string>(&encodable_sdk_token)) {
    sdk_token_ = *pointer_sdk_token;
  }
  auto& encodable_app_name = map.at(flutter::EncodableValue("appName"));
  if (const std::string* pointer_app_name = std::get_if<std::string>(&encodable_app_name)) {
    app_name_ = *pointer_app_name;
  }
  auto& encodable_server_address = map.at(flutter::EncodableValue("serverAddress"));
  if (const std::string* pointer_server_address = std::get_if<std::string>(&encodable_server_address)) {
    server_address_ = *pointer_server_address;
  }
  auto& encodable_server_domain = map.at(flutter::EncodableValue("serverDomain"));
  if (const std::string* pointer_server_domain = std::get_if<std::string>(&encodable_server_domain)) {
    server_domain_ = *pointer_server_domain;
  }
  auto& encodable_env_name = map.at(flutter::EncodableValue("envName"));
  if (const std::string* pointer_env_name = std::get_if<std::string>(&encodable_env_name)) {
    env_name_ = *pointer_env_name;
  }
  auto& encodable_env_id = map.at(flutter::EncodableValue("envId"));
  if (const std::string* pointer_env_id = std::get_if<std::string>(&encodable_env_id)) {
    env_id_ = *pointer_env_id;
  }
  auto& encodable_env_domain = map.at(flutter::EncodableValue("envDomain"));
  if (const std::string* pointer_env_domain = std::get_if<std::string>(&encodable_env_domain)) {
    env_domain_ = *pointer_env_domain;
  }
  auto& encodable_env_debug_mode = map.at(flutter::EncodableValue("envDebugMode"));
  if (const bool* pointer_env_debug_mode = std::get_if<bool>(&encodable_env_debug_mode)) {
    env_debug_mode_ = *pointer_env_debug_mode;
  }
  auto& encodable_prefer_language = map.at(flutter::EncodableValue("preferLanguage"));
  if (const std::string* pointer_prefer_language = std::get_if<std::string>(&encodable_prefer_language)) {
    prefer_language_ = *pointer_prefer_language;
  }
}

WeMeetApiCodecSerializer::WeMeetApiCodecSerializer() {}
flutter::EncodableValue WeMeetApiCodecSerializer::ReadValueOfType(uint8_t type, flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:    
      return flutter::CustomEncodableValue(DartInitParams(std::get<flutter::EncodableMap>(ReadValue(stream))));
    
    default:    
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
      }
}

void WeMeetApiCodecSerializer::WriteValue(const flutter::EncodableValue& value, flutter::ByteStreamWriter* stream) const {
  if (const flutter::CustomEncodableValue* custom_value = std::get_if<flutter::CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(DartInitParams)) {
      stream->WriteByte(128);
      WriteValue(std::any_cast<DartInitParams>(*custom_value).ToEncodableMap(), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by WeMeetApi.
const flutter::StandardMessageCodec& WeMeetApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&WeMeetApiCodecSerializer::GetInstance());
}

// Sets up an instance of `WeMeetApi` to handle messages through the `binary_messenger`.
void WeMeetApi::SetUp(flutter::BinaryMessenger* binary_messenger, WeMeetApi* api) {
  {
    auto channel = std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
        binary_messenger, "dev.flutter.pigeon.WeMeetApi.init", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const flutter::EncodableValue& message, const flutter::MessageReply<flutter::EncodableValue>& reply) {
        flutter::EncodableMap wrapped;
        try {
          const auto& args = std::get<flutter::EncodableList>(message);
          const auto& encodable_param_arg = args.at(0);
          if (encodable_param_arg.IsNull()) {
            wrapped.emplace(flutter::EncodableValue("error"), WrapError("param_arg unexpectedly null."));
            reply(wrapped);
            return;
          }
          const auto& param_arg = std::any_cast<const DartInitParams&>(std::get<flutter::CustomEncodableValue>(encodable_param_arg));
          std::optional<FlutterError> output = api->Init(param_arg);
          if (output.has_value()) {
            wrapped.emplace(flutter::EncodableValue("error"), WrapError(output.value()));
          } else {
            wrapped.emplace(flutter::EncodableValue("result"), flutter::EncodableValue());
          }
        }
        catch (const std::exception& exception) {
          wrapped.emplace(flutter::EncodableValue("error"), WrapError(exception.what()));
        }
        reply(wrapped);
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
        binary_messenger, "dev.flutter.pigeon.WeMeetApi.release", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const flutter::EncodableValue& message, const flutter::MessageReply<flutter::EncodableValue>& reply) {
        flutter::EncodableMap wrapped;
        try {
          std::optional<FlutterError> output = api->Release();
          if (output.has_value()) {
            wrapped.emplace(flutter::EncodableValue("error"), WrapError(output.value()));
          } else {
            wrapped.emplace(flutter::EncodableValue("result"), flutter::EncodableValue());
          }
        }
        catch (const std::exception& exception) {
          wrapped.emplace(flutter::EncodableValue("error"), WrapError(exception.what()));
        }
        reply(wrapped);
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

flutter::EncodableMap WeMeetApi::WrapError(std::string_view error_message) {
  return flutter::EncodableMap({
    {flutter::EncodableValue("message"), flutter::EncodableValue(std::string(error_message))},
    {flutter::EncodableValue("code"), flutter::EncodableValue("Error")},
    {flutter::EncodableValue("details"), flutter::EncodableValue()}
  });
}
flutter::EncodableMap WeMeetApi::WrapError(const FlutterError& error) {
  return flutter::EncodableMap({
    {flutter::EncodableValue("message"), flutter::EncodableValue(error.message())},
    {flutter::EncodableValue("code"), flutter::EncodableValue(error.code())},
    {flutter::EncodableValue("details"), error.details()}
  });
}

}  // namespace pigeon
