// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_WEMEETAPI_PIGEON_H_
#define PIGEON_WEMEETAPI_PIGEON_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon {

// Generated class from Pigeon.

class FlutterError {
 public:
  FlutterError(const std::string& code)
    : code_(code) {}
  FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) { new(&v_) T(rhs); }
  ErrorOr(const T&& rhs) { v_ = std::move(rhs); }
  ErrorOr(const FlutterError& rhs) {
    new(&v_) FlutterError(rhs);
  }
  ErrorOr(const FlutterError&& rhs) { v_ = std::move(rhs); }

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class WeMeetApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated class from Pigeon that represents data sent in messages.
class DartInitParams {
 public:
  DartInitParams();
  const std::string& sdk_id() const;
  void set_sdk_id(std::string_view value_arg);

  const std::string& sdk_token() const;
  void set_sdk_token(std::string_view value_arg);

  const std::string& app_name() const;
  void set_app_name(std::string_view value_arg);

  const std::string& server_address() const;
  void set_server_address(std::string_view value_arg);

  const std::string& server_domain() const;
  void set_server_domain(std::string_view value_arg);

  const std::string& env_name() const;
  void set_env_name(std::string_view value_arg);

  const std::string& env_id() const;
  void set_env_id(std::string_view value_arg);

  const std::string& env_domain() const;
  void set_env_domain(std::string_view value_arg);

  bool env_debug_mode() const;
  void set_env_debug_mode(bool value_arg);

  const std::string& prefer_language() const;
  void set_prefer_language(std::string_view value_arg);


 private:
  DartInitParams(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class WeMeetApi;
  friend class WeMeetApiCodecSerializer;
  std::string sdk_id_;
  std::string sdk_token_;
  std::string app_name_;
  std::string server_address_;
  std::string server_domain_;
  std::string env_name_;
  std::string env_id_;
  std::string env_domain_;
  bool env_debug_mode_;
  std::string prefer_language_;

};

class WeMeetApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:

  inline static WeMeetApiCodecSerializer& GetInstance() {
    static WeMeetApiCodecSerializer sInstance;
    return sInstance;
  }

  WeMeetApiCodecSerializer();

 public:
  void WriteValue(const flutter::EncodableValue& value, flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(uint8_t type, flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class WeMeetApi {
 public:
  WeMeetApi(const WeMeetApi&) = delete;
  WeMeetApi& operator=(const WeMeetApi&) = delete;
  virtual ~WeMeetApi() { };
  virtual std::optional<FlutterError> Init(const DartInitParams& param) = 0;
  virtual std::optional<FlutterError> Release() = 0;

  // The codec used by WeMeetApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `WeMeetApi` to handle messages through the `binary_messenger`.
  static void SetUp(flutter::BinaryMessenger* binary_messenger, WeMeetApi* api);
  static flutter::EncodableMap WrapError(std::string_view error_message);
  static flutter::EncodableMap WrapError(const FlutterError& error);

 protected:
  WeMeetApi() = default;

};
}  // namespace pigeon
#endif  // PIGEON_WEMEETAPI_PIGEON_H_
