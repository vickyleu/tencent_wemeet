// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

///Generated class from Pigeon that represents data sent in messages.
struct DartInitParams {
  var sdkId: String
  var sdkToken: String
  var appName: String
  var serverAddress: String
  var serverDomain: String
  var envName: String
  var envId: String
  var envDomain: String
  var envDebugMode: Bool
  var preferLanguage: String

  static func fromMap(_ map: [String: Any?]) -> DartInitParams? {
    let sdkId = map["sdkId"] as! String
    let sdkToken = map["sdkToken"] as! String
    let appName = map["appName"] as! String
    let serverAddress = map["serverAddress"] as! String
    let serverDomain = map["serverDomain"] as! String
    let envName = map["envName"] as! String
    let envId = map["envId"] as! String
    let envDomain = map["envDomain"] as! String
    let envDebugMode = map["envDebugMode"] as! Bool
    let preferLanguage = map["preferLanguage"] as! String

    return DartInitParams(
      sdkId: sdkId,
      sdkToken: sdkToken,
      appName: appName,
      serverAddress: serverAddress,
      serverDomain: serverDomain,
      envName: envName,
      envId: envId,
      envDomain: envDomain,
      envDebugMode: envDebugMode,
      preferLanguage: preferLanguage
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "sdkId": sdkId,
      "sdkToken": sdkToken,
      "appName": appName,
      "serverAddress": serverAddress,
      "serverDomain": serverDomain,
      "envName": envName,
      "envId": envId,
      "envDomain": envDomain,
      "envDebugMode": envDebugMode,
      "preferLanguage": preferLanguage
    ]
  }
}
private class WeMeetApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return DartInitParams.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class WeMeetApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DartInitParams {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class WeMeetApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return WeMeetApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return WeMeetApiCodecWriter(data: data)
  }
}

class WeMeetApiCodec: FlutterStandardMessageCodec {
  static let shared = WeMeetApiCodec(readerWriter: WeMeetApiCodecReaderWriter())
}

///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol WeMeetApi {
  func init(param: DartInitParams)
  func release()
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class WeMeetApiSetup {
  /// The codec used by WeMeetApi.
  static var codec: FlutterStandardMessageCodec { WeMeetApiCodec.shared }
  /// Sets up an instance of `WeMeetApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: WeMeetApi?) {
    let initChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.WeMeetApi.init", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! DartInitParams
        api.init(param: paramArg)
        reply(nil)
      }
    } else {
      initChannel.setMessageHandler(nil)
    }
    let releaseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.WeMeetApi.release", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      releaseChannel.setMessageHandler { _, reply in
        api.release()
        reply(nil)
      }
    } else {
      releaseChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
