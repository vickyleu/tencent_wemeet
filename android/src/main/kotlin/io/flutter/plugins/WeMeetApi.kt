// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */

/** 错误码 */
enum class DartErrorCode(val raw: Int) {
  success(0),
  serverConfigFail(-1001),
  invalidAuthCode(-1002),
  logoutInMeeting(-1003),
  unknown(-1005),
  userNotAuthorized(-1006),
  userInMeeting(-1007),
  invalidParam(-1008),
  invalidMeetingCode(-1009),
  invalidNickname(-1010),
  duplicateInitCall(-1011),
  accountAlreadyLogin(-1012),
  sdkNotInitialized(-1013),
  syncCallTimeout(-1014),
  notInMeeting(-1015),
  cancelJoin(-1016),
  isLogining(-1017),
  loginNetError(-1018),
  tokenVerifyFailed(-1019),
  childProcessCrash(-1020),
  multiAccountLoginConflict(-1021),
  joinMeetingServiceFailed(-1022),
  invalidJsonString(-1024),
  proxySetFailed(-1025);

  companion object {
    fun ofRaw(raw: Int): DartErrorCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DartInitParams (
  /** sdk的id */
  val sdkId: String,
  /** sdk的token,不是登录的idToken */
  val sdkToken: String,
  /** 应用名称 */
  val appName: String,
  val serverAddress: String? = null,
  val serverDomain: String? = null,
  val preferLanguage: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromMap(map: Map<String, Any?>): DartInitParams {
      val sdkId = map["sdkId"] as String
      val sdkToken = map["sdkToken"] as String
      val appName = map["appName"] as String
      val serverAddress = map["serverAddress"] as? String
      val serverDomain = map["serverDomain"] as? String
      val preferLanguage = map["preferLanguage"] as? String

      return DartInitParams(sdkId, sdkToken, appName, serverAddress, serverDomain, preferLanguage)
    }
  }
  fun toMap(): Map<String, Any?> {
    val map = mutableMapOf<String, Any?>()
    map["sdkId"] = sdkId
    map["sdkToken"] = sdkToken
    map["appName"] = appName
    serverAddress?.let { map["serverAddress"] = it }
    serverDomain?.let { map["serverDomain"] = it }
    preferLanguage?.let { map["preferLanguage"] = it }
    return map
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DartJoinParam (
  /** 会议号 */
  val meetingCode: String,
  /** 用户名 */
  val userDisplayName: String,
  /** 会议密码 */
  val password: String,
  /** 邀请链接 */
  val inviteUrl: String,
  /** 是否开启麦克风 */
  val micOn: Boolean,
  /** 是否开启摄像头 */
  val cameraOn: Boolean,
  /** 是否开启扬声器 */
  val speakerOn: Boolean,
  /** 是否开启美颜 */
  val faceBeautyOn: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromMap(map: Map<String, Any?>): DartJoinParam {
      val meetingCode = map["meetingCode"] as String
      val userDisplayName = map["userDisplayName"] as String
      val password = map["password"] as String
      val inviteUrl = map["inviteUrl"] as String
      val micOn = map["micOn"] as Boolean
      val cameraOn = map["cameraOn"] as Boolean
      val speakerOn = map["speakerOn"] as Boolean
      val faceBeautyOn = map["faceBeautyOn"] as Boolean

      return DartJoinParam(meetingCode, userDisplayName, password, inviteUrl, micOn, cameraOn, speakerOn, faceBeautyOn)
    }
  }
  fun toMap(): Map<String, Any?> {
    val map = mutableMapOf<String, Any?>()
    map["meetingCode"] = meetingCode
    map["userDisplayName"] = userDisplayName
    map["password"] = password
    map["inviteUrl"] = inviteUrl
    map["micOn"] = micOn
    map["cameraOn"] = cameraOn
    map["speakerOn"] = speakerOn
    map["faceBeautyOn"] = faceBeautyOn
    return map
  }
}
@Suppress("UNCHECKED_CAST")
private object WeMeetApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? Map<String, Any?>)?.let {
          DartInitParams.fromMap(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? Map<String, Any?>)?.let {
          DartJoinParam.fromMap(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is DartInitParams -> {
        stream.write(128)
        writeValue(stream, value.toMap())
      }
      is DartJoinParam -> {
        stream.write(129)
        writeValue(stream, value.toMap())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface WeMeetApi {
  /**
   * 初始化SDK并设置回调代理，通过SDKCallback.onSDKInitializeResult回调来返回初始化结果。
   * 初始化成功后，重复调用无效。
   * 除getSDKVersion之外，在调用的所有接口函数之前，必须第一个先调用该函数。
   * 按照个保法要求，App需要在用户同意了隐私协议之后才可以调用该初始化函数。
   */
  fun initWeMeet(param: DartInitParams)
  /** 跳转历史会议界面 */
  fun jumpToHistory()
  /** 通知android隐私协议已授权 */
  fun notifyPrivacyGranted()
  /** 判断是否已初始化SDK成功 */
  fun isInitialized(): Boolean
  /** 发起登录请求，登录结果会在回调AuthenticationCallback.onLogin返回。 */
  fun loginWeMeet(ssoUrl: String)
  /** 判断是否已登录 */
  fun isLoggedIn(): Boolean
  /**
   * 发起入会请求，结果会在回调PreMeetingCallback.onJoinMeeting返回。登录完成后，才可调用。
   * 如果想使用JoinParam参数中缺省的默认值，请使用joinMeetingByJSON函数
   */
  fun joinMeeting(joinParam: DartJoinParam)
  /** 发起离会请求，结果会在回调InMeetingCallback.onLeaveMeeting返回 */
  fun leaveMeeting()
  /** 释放资源 */
  fun releaseWeMeet()
  /** 发起登出请求，登出结果会在回调AuthenticationCallback.onLogout返回。 */
  fun logout()
  /** 更新SDK Token，替换掉过期或快过期的SDK Token。 */
  fun refreshSDKToken(newSdkToken: String): Long
  /**
   * 显示某一个具体会议的界面。
   * 登陆完成后，才可调用。
   * 如果输入错误的meeting_id或者current_sub_meeting_id，会议页面中有的字段则会显示’-‘；
   * 如果输入错误的start_time可能导致页面加载失败，设置准确的start_time参数接口执行效率更高；
   */
  fun showMeetingDetailView(meetingId: String, currentSubMeetingId: String, startTime: String, isHistory: Boolean)
  /** 带登录态去打开目标地址，该地址必须是会议相关的、并支持登录态方式的页面，必须登录成功才可调用。 */
  fun jumpUrlWithLoginStatus(targetUrl: String)
  /** 获取一个带登录态的URL链接，该地址必须是会议相关的、并支持登录态方式的页面，必须登录成功才可调用。 */
  fun getUrlWithLoginStatus(targetUrl: String): String
  /** 获取当前SDK Token的值。 */
  fun getCurrentSDKToken(): String

  companion object {
    /** The codec used by WeMeetApi. */
    val codec: MessageCodec<Any?> by lazy {
      WeMeetApiCodec
    }
    /** Sets up an instance of `WeMeetApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: WeMeetApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.initWeMeet", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val paramArg = args[0] as DartInitParams
              api.initWeMeet(paramArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.jumpToHistory", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.jumpToHistory()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.notifyPrivacyGranted", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.notifyPrivacyGranted()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.isInitialized", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              wrapped["result"] = api.isInitialized()
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.loginWeMeet", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val ssoUrlArg = args[0] as String
              api.loginWeMeet(ssoUrlArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.isLoggedIn", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              wrapped["result"] = api.isLoggedIn()
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.joinMeeting", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val joinParamArg = args[0] as DartJoinParam
              api.joinMeeting(joinParamArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.leaveMeeting", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.leaveMeeting()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.releaseWeMeet", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.releaseWeMeet()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.logout", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.logout()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.refreshSDKToken", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val newSdkTokenArg = args[0] as String
              wrapped["result"] = api.refreshSDKToken(newSdkTokenArg)
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.showMeetingDetailView", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val meetingIdArg = args[0] as String
              val currentSubMeetingIdArg = args[1] as String
              val startTimeArg = args[2] as String
              val isHistoryArg = args[3] as Boolean
              api.showMeetingDetailView(meetingIdArg, currentSubMeetingIdArg, startTimeArg, isHistoryArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.jumpUrlWithLoginStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val targetUrlArg = args[0] as String
              api.jumpUrlWithLoginStatus(targetUrlArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.getUrlWithLoginStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val targetUrlArg = args[0] as String
              wrapped["result"] = api.getUrlWithLoginStatus(targetUrlArg)
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.getCurrentSDKToken", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              wrapped["result"] = api.getCurrentSDKToken()
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class WeMeetHostApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by WeMeetHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  /** 当前登录失效了 */
  fun sdkTokenInvalid(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetHostApi.sdkTokenInvalid", codec)
    channel.send(null) {
      callback()
    }
  }
  /** 非阻塞通知sdk初始化成功 */
  fun sdkInitSuccess(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetHostApi.sdkInitSuccess", codec)
    channel.send(null) {
      callback()
    }
  }
  /**登录失败了 */
  fun loginFailed(codeArg: Long, msgArg: String?, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetHostApi.loginFailed", codec)
    channel.send(listOf(codeArg, msgArg)) {
      callback()
    }
  }
  /** 非住宿通知登录成功 */
  fun loginSuccess(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetHostApi.loginSuccess", codec)
    channel.send(null) {
      callback()
    }
  }
  /**
   * 离开会议： 离会类型，1：用户自身操作离会；2：被踢出会议；3：会议结束
   * 结果码：0表示成功；其他值表示失败
   */
  fun onLeaveMeeting(typeArg: Long, codeArg: Long, msgArg: String, meetingCodeArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetHostApi.onLeaveMeeting", codec)
    channel.send(listOf(typeArg, codeArg, msgArg, meetingCodeArg)) {
      callback()
    }
  }
  /** 非阻塞通知sdk初始化失败 */
  fun sdkInitFailed(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetHostApi.sdkInitFailed", codec)
    channel.send(null) {
      callback()
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class WeMeetAndroidGrantedHostApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by WeMeetAndroidGrantedHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  /** 读取隐私协议是否授权,由于插件采用自动配置,初始化速度快于dart端,需要提前准备好 */
  fun initPrivacyNeedGrant(callback: (Boolean?) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetAndroidGrantedHostApi.initPrivacyNeedGrant", codec)
    channel.send(null) {
      val result = it as? Boolean?
      callback(result)
    }
  }
}

private fun wrapResult(result: Any?): Map<String, Any?> {
  return hashMapOf("result" to result)
}

private fun wrapError(exception: Throwable): Map<String, Any> {
  return hashMapOf<String, Any>(
    "error" to hashMapOf<String, Any>(
      "code" to exception.javaClass.simpleName,
      "message" to exception.toString(),
      "details" to "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  )
}
