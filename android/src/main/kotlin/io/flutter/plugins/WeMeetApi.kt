// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */

/** Generated class from Pigeon that represents data sent in messages. */
data class DartInitParams (
  val sdkId: String,
  val sdkToken: String,
  val appName: String,
  val serverAddress: String,
  val serverDomain: String,
  val envName: String,
  val envId: String,
  val envDomain: String,
  val envDebugMode: Boolean,
  val preferLanguage: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromMap(map: Map<String, Any?>): DartInitParams {
      val sdkId = map["sdkId"] as String
      val sdkToken = map["sdkToken"] as String
      val appName = map["appName"] as String
      val serverAddress = map["serverAddress"] as String
      val serverDomain = map["serverDomain"] as String
      val envName = map["envName"] as String
      val envId = map["envId"] as String
      val envDomain = map["envDomain"] as String
      val envDebugMode = map["envDebugMode"] as Boolean
      val preferLanguage = map["preferLanguage"] as String

      return DartInitParams(sdkId, sdkToken, appName, serverAddress, serverDomain, envName, envId, envDomain, envDebugMode, preferLanguage)
    }
  }
  fun toMap(): Map<String, Any?> {
    val map = mutableMapOf<String, Any?>()
    map["sdkId"] = sdkId
    map["sdkToken"] = sdkToken
    map["appName"] = appName
    map["serverAddress"] = serverAddress
    map["serverDomain"] = serverDomain
    map["envName"] = envName
    map["envId"] = envId
    map["envDomain"] = envDomain
    map["envDebugMode"] = envDebugMode
    map["preferLanguage"] = preferLanguage
    return map
  }
}
@Suppress("UNCHECKED_CAST")
private object WeMeetApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? Map<String, Any?>)?.let {
          DartInitParams.fromMap(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is DartInitParams -> {
        stream.write(128)
        writeValue(stream, value.toMap())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface WeMeetApi {
  fun init(param: DartInitParams)
  fun release()

  companion object {
    /** The codec used by WeMeetApi. */
    val codec: MessageCodec<Any?> by lazy {
      WeMeetApiCodec
    }
    /** Sets up an instance of `WeMeetApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: WeMeetApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.init", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              val args = message as List<Any?>
              val paramArg = args[0] as DartInitParams
              api.init(paramArg)
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WeMeetApi.release", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped = hashMapOf<String, Any?>()
            try {
              api.release()
              wrapped["result"] = null
            } catch (exception: Error) {
              wrapped["error"] = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private fun wrapResult(result: Any?): Map<String, Any?> {
  return hashMapOf("result" to result)
}

private fun wrapError(exception: Throwable): Map<String, Any> {
  return hashMapOf<String, Any>(
    "error" to hashMapOf<String, Any>(
      "code" to exception.javaClass.simpleName,
      "message" to exception.toString(),
      "details" to "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  )
}
